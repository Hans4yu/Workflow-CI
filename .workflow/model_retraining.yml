name: Model Retraining CI

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]
    paths:
      - 'Workflow-CI/**'
      - '.github/workflows/model_retraining.yml'
  schedule:
    - cron: '0 0 1 * *'  # Run on the 1st day of each month at midnight UTC

jobs:
  model-retraining:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set up job
        uses: actions/checkout@v3

      - name: Run actions/checkout@v3
        uses: actions/checkout@v3
      
      - name: Set up Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.7'
          
      - name: Check Env
        run: |
          python --version
          pip --version
        - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mlflow==2.19.0 scikit-learn==1.4.1 pandas==2.2.0 numpy==1.26.3 matplotlib==3.8.2 seaborn==0.13.1 joblib==1.3.2
      
      - name: Run mlflow project
        working-directory: ${{ github.workspace }}/Workflow-CI/MLProject
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI || 'https://dagshub.com/Hans4yu/Membangun_model.mlflow' }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
          MLFLOW_EXPERIMENT_NAME: "Loan Approval Auto Retraining"
        run: |
          mlflow run . --no-conda -P data_path=loanapproval_preprocessing.csv -P test_size=0.2 -P random_state=42 -P n_iter=20
      
      - name: Get latest MLflow run_id
        working-directory: ${{ github.workspace }}/Workflow-CI/MLProject
        run: |
          echo "MLFLOW_RUN_ID=$(ls -t mlruns/*/*/meta.yaml | head -1 | cut -d'/' -f1-3)" >> $GITHUB_ENV
            - name: Install Python dependencies
        run: |
          pip install requests
      
      - name: Upload to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: model-artifacts
          path: |
            ${{ github.workspace }}/Workflow-CI/MLProject/artifacts
            ${{ github.workspace }}/Workflow-CI/MLProject/mlruns
        - name: Build Docker Model
        working-directory: ${{ github.workspace }}/Workflow-CI
        run: |
          # Copy model artifacts to Docker build context
          mkdir -p docker_build
          cp -r MLProject/artifacts docker_build/
      
      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'  # Only on main branch
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Tag Docker Image
        if: github.ref == 'refs/heads/main'  # Only on main branch
        working-directory: ${{ github.workspace }}/Workflow-CI
        run: |
          # Generate timestamp for the image tag
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          # Copy model artifacts to Docker build context
          mkdir -p docker_build
          cp -r MLProject/artifacts docker_build/
          
          # Create Dockerfile
          cat > docker_build/Dockerfile << EOF
          FROM python:3.8-slim
          
          WORKDIR /app
          
          COPY artifacts /app/artifacts
          
          RUN pip install mlflow==2.19.0 scikit-learn==1.4.1 pandas==2.2.0 joblib==1.3.2 flask==2.0.1
          
          # Create a simple Flask app to serve the model
          COPY artifacts/model.pkl /app/model.pkl
          
          # Create a simple model server
          RUN echo 'from flask import Flask, request, jsonify\n\
          import numpy as np\n\
          import joblib\n\
          import json\n\
          \n\
          app = Flask(__name__)\n\
          \n\
          # Load the model\n\
          model = joblib.load("/app/model.pkl")\n\
          \n\
          @app.route("/")\n\
          def home():\n\
              return "Loan Approval Model API"\n\
          \n\
          @app.route("/predict", methods=["POST"])\n\
          def predict():\n\
              try:\n\
                  # Get input features from request\n\
                  features = request.json\n\
                  \n\
                  # Convert to numpy array\n\
                  input_features = np.array(list(features.values())).reshape(1, -1)\n\
                  \n\
                  # Make prediction\n\
                  prediction = model.predict(input_features)\n\
                  probability = model.predict_proba(input_features)[0][1]  # Probability of class 1\n\
                  \n\
                  # Return prediction\n\
                  return jsonify({\n\
                      "prediction": int(prediction[0]),\n\
                      "probability": float(probability),\n\
                      "status": "Approved" if prediction[0] == 1 else "Rejected"\n\
                  })\n\
              except Exception as e:\n\
                  return jsonify({"error": str(e)})\n\
          \n\
          # Load model info\n\
          try:\n\
              with open("/app/artifacts/model_info.json", "r") as f:\n\
                  model_info = json.load(f)\n\
          except:\n\
              model_info = {}\n\
          \n\
          @app.route("/info", methods=["GET"])\n\
          def info():\n\
              return jsonify(model_info)\n\
          \n\
          if __name__ == "__main__":\n\
              app.run(host="0.0.0.0", port=5000)' > /app/app.py
          
          EXPOSE 5000
          
          CMD ["python", "app.py"]
          EOF
          
          # Build and push Docker image
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/loan-approval-model:${TIMESTAMP} -t ${{ secrets.DOCKER_HUB_USERNAME }}/loan-approval-model:latest docker_build/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/loan-approval-model:${TIMESTAMP}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/loan-approval-model:latest
            # Create Docker Hub link file
          echo "Docker Hub Repository: https://hub.docker.com/r/${{ secrets.DOCKER_HUB_USERNAME }}/loan-approval-model" > docker_hub_link.txt
          
      - name: Post Log in to Docker Hub
        if: always() && github.ref == 'refs/heads/main'
        run: docker logout
      
      - name: Post Set up Python 3.12.7
        if: always()
        run: echo "Python environment cleanup"
      
      - name: Post Run actions/checkout@v3
        if: always()
        run: echo "Checkout cleanup"
      
      - name: Complete job
        run: |
          echo "CI workflow completed successfully!"
